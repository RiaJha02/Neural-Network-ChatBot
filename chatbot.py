# -*- coding: utf-8 -*-
"""Chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d5LXx9pKbgRPaYWMQCdGSbOsfQ4lwvYV

# **Seq2Seq Model**
Link: https://www.kaggle.com/grafstor/simple-dialogs-for-chatbot
"""

import pandas as pd
import numpy as np

import re
import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')

import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences

import matplotlib.pyplot as plt
import seaborn as sns

from keras.layers import Input,Embedding,Bidirectional,LSTM,Dense,Concatenate
from keras.models import Model

import os

!wget http://nlp.stanford.edu/data/glove.6B.zip
!unzip glove*.zip

"""Import Data"""

data = pd.read_csv('dialogs.txt',names=["question","answer"],sep='\t')

print('='*100)
print(data.head())
print('='*100)

print('='*100)
print(data.shape)
print('='*100)

print('='*100)
print(data.info())
print('='*100)

print('='*100)
print(data.describe())
print('='*100)

"""Text Cleaning and Preprocessing"""

data.drop_duplicates(subset=['question'],inplace=True)
print('='*100)
print(data.isnull().sum())
print('='*100)
print(data.isnull().any())
print('='*100)
print(data.describe())
print('='*100)

stop_words = set(stopwords.words('english'))
contractions = {"ain't": "is not", "aren't": "are not","can't": "cannot", "'cause": "because", "could've": "could have", "couldn't": "could not", "didn't": "did not",  "doesn't": "does not", "don't": "do not", "hadn't": "had not", "hasn't": "has not", "haven't": "have not", "he'd": "he would","he'll": "he will", "he's": "he is", "how'd": "how did", "how'd'y": "how do you", "how'll": "how will", "how's": "how is", "I'd": "I would", "I'd've": "I would have", "I'll": "I will", "I'll've": "I will have","I'm": "I am", "I've": "I have", "i'd": "i would", "i'd've": "i would have", "i'll": "i will",  "i'll've": "i will have","i'm": "i am", "i've": "i have", "isn't": "is not", "it'd": "it would", "it'd've": "it would have", "it'll": "it will", "it'll've": "it will have","it's": "it is", "let's": "let us", "ma'am": "madam", "mayn't": "may not", "might've": "might have","mightn't": "might not","mightn't've": "might not have", "must've": "must have", "mustn't": "must not", "mustn't've": "must not have", "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock", "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not", "sha'n't": "shall not", "shan't've": "shall not have", "she'd": "she would", "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", "she's": "she is", "should've": "should have", "shouldn't": "should not", "shouldn't've": "should not have", "so've": "so have","so's": "so as", "this's": "this is","that'd": "that would", "that'd've": "that would have", "that's": "that is", "there'd": "there would", "there'd've": "there would have", "there's": "there is", "here's": "here is","they'd": "they would", "they'd've": "they would have", "they'll": "they will", "they'll've": "they will have", "they're": "they are", "they've": "they have", "to've": "to have", "wasn't": "was not", "we'd": "we would", "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", "we're": "we are", "we've": "we have", "weren't": "were not", "what'll": "what will", "what'll've": "what will have", "what're": "what are", "what's": "what is", "what've": "what have", "when's": "when is", "when've": "when have", "where'd": "where did", "where's": "where is", "where've": "where have", "who'll": "who will", "who'll've": "who will have", "who's": "who is", "who've": "who have", "why's": "why is", "why've": "why have", "will've": "will have", "won't": "will not", "won't've": "will not have", "would've": "would have", "wouldn't": "would not", "wouldn't've": "would not have", "y'all": "you all", "y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have", "you'd": "you would", "you'd've": "you would have", "you'll": "you will", "you'll've": "you will have", "you're": "you are", "you've": "you have"}

def text_prepocessing(text, stop):
  text = text.lower()
  text = ' '.join([contractions[word] if word in contractions else word for word in text.split()])
  text = re.sub(r'[^a-zA-Z0-9]',' ',text)
  if stop == True:
      text = ' '.join([word for word in text.split() if word not in stop_words])
  text = ' '.join([word for word in text.split()])
  return text

print('='*100)
print(data.head())
print('='*100)

data.question = data.question.apply(text_prepocessing, stop = False)
data.answer = data.answer.apply(text_prepocessing, stop = False)

print('='*100)
print(data.head())
print('='*100)

data['decoder_input'] = data.answer.apply(lambda x: 'sos '+x)
data['decoder_label'] = data.answer.apply(lambda x: x+' eo>')
data.head()

encoder_input = np.array(data.question)
decoder_input = np.array(data.decoder_input)
decoder_label = np.array(data.decoder_label)

n_rows = data.shape[0]
print(f"{n_rows} rows")

indices = np.arange(n_rows)
np.random.shuffle(indices)

encoder_input = encoder_input[indices]
decoder_input = decoder_input[indices]
decoder_label = decoder_label[indices]

train_size = 0.9

train_encoder_input = encoder_input[:int(n_rows*train_size)]
train_decoder_input = decoder_input[:int(n_rows*train_size)]
train_decoder_label = decoder_label[:int(n_rows*train_size)]

test_encoder_input = encoder_input[int(n_rows*train_size):]
test_decoder_input = decoder_input[int(n_rows*train_size):]
test_decoder_label = decoder_label[int(n_rows*train_size):]

print(train_encoder_input.shape)
print(train_decoder_input.shape)
print(train_decoder_label.shape)

print(test_encoder_input.shape)
print(test_decoder_input.shape)
print(test_decoder_label.shape)

q_tok = Tokenizer()
q_tok.fit_on_texts(train_encoder_input)
print(len(q_tok.word_counts))

a_tok = Tokenizer()
a_tok.fit_on_texts(train_decoder_input)
a_tok.fit_on_texts(train_decoder_label)
print(len(a_tok.word_counts))

train_encoder_input = q_tok.texts_to_sequences(train_encoder_input)
test_encoder_input = q_tok.texts_to_sequences(test_encoder_input)

train_decoder_input = a_tok.texts_to_sequences(train_decoder_input)
test_decoder_input = a_tok.texts_to_sequences(test_decoder_input)

train_decoder_label = a_tok.texts_to_sequences(train_decoder_label)
test_decoder_label = a_tok.texts_to_sequences(test_decoder_label)

question_word_size = len(q_tok.word_counts)
question_vocab_size = question_word_size+1

answer_word_size = len(a_tok.word_counts)
answer_vocab_size = answer_word_size+1

question_lengths = [len(s) for s in train_encoder_input]
print(f"maximum question sequence length : {np.max(question_lengths)}")

answer_lengths = [len(s) for s in train_decoder_input]
print(f"maximum answer sequence length : {np.max(answer_lengths)}")

plt.subplot(2,1,1)
plt.hist(question_lengths,bins=50)
plt.show()

plt.subplot(2,1,2)
plt.hist(answer_lengths,bins=50)
plt.show()

train_encoder_input = pad_sequences(train_encoder_input,padding='post')
train_decoder_input = pad_sequences(train_decoder_input,padding='post')
train_decoder_label = pad_sequences(train_decoder_label,padding='post')

print(train_encoder_input.shape)
print(train_decoder_input.shape)
print(train_decoder_label.shape)

question_sequence_size = train_encoder_input.shape[1]
answer_sequence_size = train_decoder_input.shape[1]

test_encoder_input = pad_sequences(test_encoder_input,padding='post',maxlen=question_sequence_size)
test_decoder_input = pad_sequences(test_decoder_input,padding='post',maxlen=answer_sequence_size)
test_decoder_label = pad_sequences(test_decoder_label,padding='post',maxlen=answer_sequence_size)

print(test_encoder_input.shape)
print(test_decoder_input.shape)
print(test_decoder_label.shape)

"""Word Embedding"""

embedding_size=256

#trainer model

hidden_size = 256

encoder_input = Input(shape=[question_sequence_size])
# encoder_embedding = Embedding(question_vocab_size,embedding_size,mask_zero=True,trainable=False,weights=[question_embedding_matrix])
encoder_embedding = Embedding(question_vocab_size,embedding_size,mask_zero=True)
encoder_embedded = encoder_embedding(encoder_input)

lstm1 = Bidirectional(LSTM(hidden_size,return_sequences=True,return_state=True,dropout=0.3,recurrent_dropout=0.3))
encoder_output1,_,_,_,_ = lstm1(encoder_embedded)
lstm2 = Bidirectional(LSTM(hidden_size,return_sequences=True,return_state=True,dropout=0.3,recurrent_dropout=0.3))
encoder_output2,_,_,_,_ = lstm2(encoder_output1)
lstm3 = Bidirectional(LSTM(hidden_size,return_sequences=True,return_state=True,dropout=0.3,recurrent_dropout=0.3))
encoder_output3,encoder_forward_h3,encoder_forward_c3,encoder_backward_h3,encoder_backward_c3= lstm3(encoder_output2)

encoder_h3 = Concatenate(axis=-1)([encoder_forward_h3,encoder_backward_h3])
encoder_dense_h = Dense(hidden_size)
encoder_h3 = encoder_dense_h(encoder_h3)

encoder_c3 = Concatenate(axis=-1)([encoder_forward_c3,encoder_backward_c3])
encoder_dense_c = Dense(hidden_size)
encoder_c3 = encoder_dense_c(encoder_c3)

decoder_input = Input(shape=(None,))
# decoder_embedding = Embedding(answer_vocab_size,embedding_size,mask_zero=True,trainable=False,weights=[answer_embedding_matrix])
decoder_embedding = Embedding(answer_vocab_size,embedding_size,mask_zero=True)
decoder_embedded = decoder_embedding(decoder_input)

decoder_lstm = LSTM(hidden_size,return_sequences=True,return_state=True)
decoder_output,_,_ = decoder_lstm(decoder_embedded,initial_state=[encoder_h3,encoder_c3])

dense1 = Dense(512,activation='relu')
decoder_output = dense1(decoder_output)

decoder_softmax = Dense(answer_vocab_size,activation='softmax')
decoder_output = decoder_softmax(decoder_output)

trainer = Model([encoder_input,decoder_input],decoder_output)
trainer.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

train_hist = trainer.fit([train_encoder_input,train_decoder_input],train_decoder_label,epochs=45,validation_split=0.1,batch_size=32)

from keras.utils import plot_model

#generator model
gen_encoder = Model(encoder_input,[encoder_h3,encoder_c3])

gen_decoder_h_input = Input(shape=[hidden_size])
gen_decoder_c_input = Input(shape=[hidden_size])

gen_decoder_embedded = decoder_embedding(decoder_input)
gen_decoder_output,gen_decoder_h,gen_decoder_c = decoder_lstm(gen_decoder_embedded,initial_state=[gen_decoder_h_input,gen_decoder_c_input])
gen_decoder_output = dense1(gen_decoder_output)
gen_decoder_output = decoder_softmax(gen_decoder_output)

gen_decoder = Model([decoder_input]+[gen_decoder_h_input,gen_decoder_c_input],[gen_decoder_output]+[gen_decoder_h,gen_decoder_c])

plot_model(gen_encoder)

plot_model(gen_decoder)

def generate_from_input(encoder_input):
    h,c = gen_encoder.predict(encoder_input)
    
    decoder_seq = np.zeros((1,1))
    decoder_seq[0,0] = a_tok.word_index['sos']
    
    generated_sent = ''
    stop_condition= False
    
    while not stop_condition:
        output,h_state,c_state = gen_decoder.predict([decoder_seq]+[h,c])
        sampled_index = np.argmax(output[0,-1,:])
        sampled_word = a_tok.index_word[sampled_index]
        
        if sampled_word != 'eos':
            generated_sent = generated_sent + sampled_word + ' '
        
        if sampled_word == 'eos' or len(generated_sent) >= answer_sequence_size:
            stop_condition=True
        
        decoder_seq = np.zeros((1,1))
        decoder_seq[0,0] = sampled_index
        h,c = h_state,c_state
        
    return generated_sent.strip()

print(generate_from_input(train_encoder_input[0].reshape(1,question_sequence_size,-1)))
print(generate_from_input(train_encoder_input[100].reshape(1,question_sequence_size,-1)))
print(generate_from_input(train_encoder_input[2050].reshape(1,question_sequence_size,-1)))

def seq2question(encoder_input):
    ret=[q_tok.index_word[idx] for idx in encoder_input if idx != 0]
    return ' '.join(ret)

def seq2answer(decoder_input):
    ret = []
    for idx in decoder_input:
        if idx != 0:
            if a_tok.index_word[idx] != 'sos' and a_tok.index_word[idx] != 'eos':
                ret.append(a_tok.index_word[idx])
                
    return ' '.join(ret)

#results on train dataset
sample_indices= [5,26,7,11,735,662,115,321]

for idx in sample_indices:
    generated_sent = generate_from_input(train_encoder_input[idx:idx+1])
    print(f"Question : {seq2question(train_encoder_input[idx])}")
    print(f"Answer(Generated) : {generated_sent}")
    print(f"Answer(Label) : {seq2answer(train_decoder_input[idx])}")
    print("="*100)
    print("\n")

#results on test dataset
sample_indices= [159,29,44,33]

for idx in sample_indices:
    generated_sent = generate_from_input(test_encoder_input[idx:idx+1])
    print(f"Question : {seq2question(test_encoder_input[idx])}")
    print(f"Answer(Generated) : {generated_sent}")
    print(f"Answer(Label) : {seq2answer(test_decoder_input[idx])}")
    print("="*100)
    print("\n")